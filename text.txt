# main.py

from kivymd.app import MDApp
from kivy.lang import Builder
from language_manager import LanguageManager
from kivymd.uix.textfield import MDTextField
from kivy.clock import Clock
from kivymd.uix.screen import MDScreen
from kivy.uix.image import Image
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.screenmanager import ScreenManager
from database import databaseManeger


class MyMDTextField(MDTextField):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.font_name = "kv/font/NotoNaskhArabic-VariableFont_wght.ttf"
        self.font_name_hint_text = (
            "kv/font/NotoNaskhArabic-VariableFont_wght.ttf"  # Important!!
        )


class Main(MDApp):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.databasemaneger = databaseManeger()

    def build(self):
        self.language_manager = LanguageManager()
        self.current_language = "ar"

        self.screen_manager = ScreenManager()

        # Create the loading screen
        self.loading_screen = MDScreen(name="loading")
        box = BoxLayout(spacing=20, padding=50)
        logo = Image(source="kv/images/logo.png")  # your logo path
        box.add_widget(logo)
        self.loading_screen.add_widget(box)

        self.screen_manager.add_widget(self.loading_screen)

        # Schedule moving to the home screen after 1 second
        Clock.schedule_once(self.show_home_screen, 1)

        return self.screen_manager

    def show_home_screen(self, dt):
        self.clear_screen()
        # Load home screen
        home_screen = Builder.load_file("./kv/home_screen.kv")
        screen = MDScreen(name="home")
        screen.add_widget(home_screen)

        self.screen_manager.add_widget(screen)
        self.screen_manager.current = "home"

    def clear_screen(self):
        # Check if "home" screen exists before clearing
        if self.screen_manager.has_screen("home"):
            home_screen = self.screen_manager.get_screen("home")
            home_screen.clear_widgets()  # Clear the existing widgets
        else:
            # If screen doesn't exist, load it from the .kv file and add it
            home_screen = Builder.load_file("./kv/home_screen.kv")
            screen = MDScreen(name="home")
            screen.add_widget(home_screen)
            self.screen_manager.add_widget(screen)

    def show_screen(self):
        self.clear_screen()
        home_screen = Builder.load_file("./kv/show_data.kv")
        screen = MDScreen(name="home")
        screen.add_widget(home_screen)
        self.screen_manager.add_widget(screen)
        self.screen_manager.current = "home"

    def get_text(self, text, lang=None):
        if lang is None:
            lang = self.current_language
        return self.language_manager.lang(text=text, lang=lang)

    def change_language(self):
        if self.current_language == "en":
            self.current_language = "ar"
        else:
            self.current_language = "en"
        self.clear_screen()

    def add(self):
        student_name = (
            self.screen_manager.get_screen("home").children[0].ids.student_name.text
        )
        book_name = (
            self.screen_manager.get_screen("home").children[0].ids.book_name.text
        )
        book_code = (
            self.screen_manager.get_screen("home").children[0].ids.book_code.text
        )

        self.databasemaneger.add_book(student_name, book_name, book_code)

        self.screen_manager.get_screen("home").children[0].ids.student_name.text = ""
        self.screen_manager.get_screen("home").children[0].ids.book_name.text = ""
        self.screen_manager.get_screen("home").children[0].ids.book_code.text = ""



if __name__ == "__main__":
    Main().run()



# show_data.kv
GridLayout:
    cols: 5
    orientation: 'lr-tb'  # Corrected orientation
    size_hint_y: None
    BoxLayout:
        size_hint_y: None
        height: 40
        Label:
            text: 'student'
            bold: True
        Label:
            text: 'book'
            bold: True
        Label:
            text: 'code'
            bold: True        
        Label:
            text: 'from'
            bold: True
        Label:
            text: 'to'
            bold: True
    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: None
        height: 40
        Button:
            text: 'Top Right'
            size_hint: None, None
            size: '100dp', '40dp'
            pos_hint: {'right': 1, 'top': 1}  # This positions it in the top-right corner
            Image:
                source: 'kv/images/image.png'  # Specify your icon image here
                allow_stretch: True
                keep_ratio: True
                size: '100dp', '100dp'  # Manually set the size

# language_manager.py
import json
import arabic_reshaper
from bidi.algorithm import get_display


class LanguageManager:
    def __init__(self):
        try:
            with open("./languages.json", "r", encoding="utf-8") as f:
                self.language = json.load(f)
        except:
            print("there aren't a language file")

    def lang(self, text, lang="en"):
        try:
            if "ar" == lang:
                return get_display(arabic_reshaper.reshape(self.language[lang][text]))
            if "en" == lang:
                return text
        except KeyError:
            return "Missing translation"


# database.py
from datetime import datetime
import sqlite3

class databaseManeger():
    def __init__(self):
        self.connect = sqlite3.connect("library.db", check_same_thread=False)
        self.cursor = self.connect.cursor()
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS books (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                student_name TEXT NOT NULL,
                book_name TEXT NOT NULL,
                book_code TEXT NOT NULL,
                borrow_date TEXT NOT NULL,
                return_book INTEGER
            )
        """)
        self.connect.commit()
    
    def add_book(self, student_name, book_name, book_code):
        try:
            borrow_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.cursor.execute("""
                INSERT INTO books (student_name, book_name, book_code, borrow_date)
                VALUES (?, ?, ?, ?)
            """, (student_name, book_name, book_code, borrow_date))
            self.connect.commit()
        except Exception as e:
            print(f"Error adding book: {e}")
        self.show()

    def show(self):
        # This will show all records from the 'books' table.
        self.cursor.execute("SELECT * FROM books")
        for row in self.cursor.fetchall():
            print(row)

# home_screen.kv
MDScreen:
    MDBoxLayout:
        orientation: 'vertical'

        BoxLayout:
            orientation: 'vertical'
            padding: dp(20)
            spacing: dp(15)

            ScrollView:
                MDBoxLayout:
                    orientation: 'vertical'
                    size_hint_y: None
                    height: self.minimum_height
                    spacing: dp(15)

                    MDLabel:
                        text: app.get_text("our library")
                        halign: 'center'
                        font_style: 'H4'
                        theme_text_color: 'Primary'
                        font_name: 'kv/font/NotoNaskhArabic-VariableFont_wght.ttf'
                        size_hint_y: None
                        height: self.texture_size[1] + dp(30)

                    # --- Student Name Field ---
                    MyMDTextField:
                        id: student_name
                        hint_text: app.get_text("student name")
                        text: ""
                        mode: "rectangle"
                        size_hint: 0.9, None
                        height: dp(50)
                        pos_hint: {"center_x": 0.5}

                    # --- Book Name Field ---
                    MyMDTextField:
                        id: book_name
                        hint_text: app.get_text("name of the book")
                        text: ""
                        mode: "rectangle"
                        size_hint: 0.9, None
                        height: dp(50)
                        pos_hint: {"center_x": 0.5}

                    # --- Book Code Field ---
                    MyMDTextField:
                        id: book_code
                        hint_text: app.get_text("code of book")
                        text: ""
                        mode: "rectangle"
                        size_hint: 0.9, None
                        height: dp(50)
                        pos_hint: {"center_x": 0.5}


                    # --- Action Buttons (Add, Show, Late Book) ---
                    GridLayout:
                        cols: 3
                        spacing: dp(10)
                        size_hint: 0.9, None
                        height: dp(50)
                        pos_hint: {"center_x": 0.5}

                        MDRaisedButton:
                            text: app.get_text("add")
                            font_name: 'kv/font/NotoNaskhArabic-VariableFont_wght.ttf'
                            size_hint_x: 1
                            on_release: app.add()

                        MDRaisedButton:
                            text: app.get_text("show")
                            font_name: 'kv/font/NotoNaskhArabic-VariableFont_wght.ttf'
                            size_hint_x: 1
                            on_release: app.show_screen()

                        MDRaisedButton:
                            text: app.get_text("later book")
                            font_name: 'kv/font/NotoNaskhArabic-VariableFont_wght.ttf'
                            size_hint_x: 1
                            # on_release: app.check_overdue()

                    MDSeparator:
                        height: dp(1)

                    # --- Delete Section ---
                    MDLabel:
                        text: app.get_text("delete")
                        halign: 'center'
                        font_style: 'H6'
                        theme_text_color: 'Primary'
                        font_name: 'kv/font/NotoNaskhArabic-VariableFont_wght.ttf'
                        size_hint_y: None
                        height: self.texture_size[1] + dp(20)

                    MyMDTextField:
                        id: delete_student_name
                        hint_text: app.get_text("student name")
                        text: ""
                        mode: "rectangle"
                        size_hint: 0.9, None
                        height: dp(50)
                        pos_hint: {"center_x": 0.5}

                    MDRaisedButton:
                        text: app.get_text("delete")
                        font_name: 'kv/font/NotoNaskhArabic-VariableFont_wght.ttf'
                        size_hint: 0.9, None
                        height: dp(50)
                        pos_hint: {"center_x": 0.5}
                        # on_release: app.delete_borrowing()

                    # --- Footer Text ---
                    MDLabel:
                        text: "the copyright keep for iyad & mohamed"
                        halign: 'center'
                        theme_text_color: 'Secondary'
                        size_hint_y: None
                        height: self.texture_size[1] + dp(20)
        

